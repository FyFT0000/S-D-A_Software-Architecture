https://www.coursera.org/learn/software-architecture?specialization=software-design-architecture

Software Architecture
    Ways architectures are represented, both in UML and other visual tools. Most common architectures, their qualities, and tradeoffs.


3.1.1 – Architecture Overview and Process
Software architecture is the fundamental design of an entire software system. It defines what elements are included in the system, what function each element has, and how each element relates to one another. It is the big picture or overall structure of the whole system—how everything works together.
_   It follows that to design a software system, a software architect has to take many factors into consideration:
    _the purpose of the system,
    _the audience or users of the system,
    _the qualities that are of most importance to users, and
    _where the system will run.
_   Software architecture is important, particularly for large systems. If there is a clear design of the overall system from the start, there is a solid basis for developers to follow. Each developer will then know what needs to be implemented and how things are related to meet desired needs efficiently. This avoids conflicts, duplication, and ad hoc unnecessary work.
_   Some advantages of software architecture include:
    _higher productivity for the software team, as a well-defined structure helps to coordinate work, implement individual features, or guide discussions on potential issues.
    _improved evolution for the software, since design principles are applied to make changes easier to accomplish or defects easier to find.
    _enhanced quality in the software by carefully considering the needs and perspectives of all the stakeholders.
_   Software architecture typically have the following stakeholders:
    _Software developers: Software architecture helps developers create and evolve software by providing strong direction and organization on what needs to be done.
    _Project Managers: Software architecture provides useful information to project managers to help them identify possible risks and to manage the project successfully. Software architecture helps project managers to understand task dependencies and impacts of change and to coordinate work assignments.
    _Clients: Clients make important decisions about the system, like its funding. Software architecture establishes a basis for communication with clients, so they understand what they are paying for and that their needs are met.
    _End users: Users may not care how the software is actually designed, but they do care that it “works well” for them.

3.1.2 – Kruchten's 4 + 1 Model View
This model is a way of understanding the key considerations or important perspectives that need to be addressed in software architecture.
_   Logical View: focuses on the functional requirements of a system, usually involves the objects of the system. From these objects, a UML class diagram can be created to illustrate the logical view.
    _A class diagram establishes the vocabulary of the problem and resulting system. By defining all of the classes, their attributes, and their behaviours it becomes easy to understand the key abstractions and terminology. Class diagrams are also useful for specifying database schemes. The class diagram makes it easier to see how classes interact and how data should relate to each other in a database.
    _Some of the most effective UML diagrams related to the logical view of a system are the class diagram and the state diagram. Both the class diagram and the state diagram focus on the classes and objects of a system.
_   Process View: focuses on achieving non-functional requirements. These are the requirements that specify the desired qualities for the system, which include quality attributes such as performance and availability. The process view also presents processes that correspond to the objects in the logical view.
    _Some of the most effective UML diagrams related to the process view of a system are the activity diagram and the sequence diagram. The activity diagram can illustrate the processes or activities for a system. The sequence diagram shows how objects interact with one another, which involves how methods are executed and in what order.
_   Development View: describes the hierarchical software structure. It also considers elements such as programming language, libraries, and toolsets. It is concerned with the details of software development and what is involved to support that. This extends to management details such as scheduling, budgets, and work assignments. Essentially, the development view covers the hierarchical software structure and project management.
_   Physical View: handles how elements in the logical, process, and development views must be mapped to different nodes or hardware for running the system.
    _One of the most effective UML diagrams related to the physical view of a system is the deployment diagram. It can express how the pieces of a system are deployed onto hardware or execution environments.
_   Scenarios: align with the use cases or user tasks of a system and show how the four other views work together. For each scenario, there is a script that describes the sequence of interactions between objects and processes. This involves the key objects defined in the logical view, the processes described in the process view, the hierarchy identified in the development view, and the different nodes specified in the physical view. Scenarios relate these elements to provide a complete picture.
_   None of the views are fully independent of each other, with elements of some views connected to others. The 4+1 view model can be molded to fit many situations to understand the architecture of a software system. Being able to see a complex problem in many different perspectives helps make your software more versatile.

3.1.3 – UML Component Diagram
Are concerned with the components of a system.
_   Components are the independent, encapsulated units within a system. Each component provides an interface for other components to interact with it. Component diagrams are used to visualize how a system’s pieces interact and what relationships they have among them.
_   Component diagrams are different from most other diagrams, as they show high-level structure and not details like attributes and methods. They are purely focused on components and their interactions with each other. Component diagrams are a static view of the software system, and depict the system design at a specific point in its development and evolution. The basis of component diagrams focuses on the components and their relationships. Each component in a diagram has a very specific relationship to the other components through the interface it provides.
_   Component diagrams have:
    _Ball connectors: which represent a provided interface. A provided interface shows that a component offers an interface for others to interact with it. The provided interface means that client and consumer components have a way of communicating with that component.
    _Socket connectors: that display a required interface. The required interface is essential to the component diagram, to show that a component expects a certain interface. This required interface is to be satisfied or provided by some other component.
    _Assembly relationship: occurs when one component’s provided interface matches another component’s required interface. The provided interface is depicted by a ball, and the required interface is depicted by a socket.
_   To build a component diagram:
    _First, you must identify the main objects used in the system.
    _Next, the relevant libraries for the system need to be identified.
    _Finally, the relationship between these components would need to be identified. When relevant libraries are identified, this extends to third-party implementation dependencies, which should also be integrated into the diagram where relevant.
_   Component diagrams are especially useful early in the design process, because of its high-level emphasis. They can be drawn at different levels and allows you to focus not only on systems but on subsystems as well.

3.1.4 – UML Package Diagram
Show packages and the dependencies between them.
_   These diagrams can organize a completed system into packages of related packageable elements, which could include data, classes, or even other packages. Package diagrams help provide high-level groupings of a system so that it is easy to see how a package contains related elements as well as how different packages depend on each other.
_   A package groups together elements of software that are related. Elements can be related based on data, classes, or user tasks. A package can also define a “namespace” for elements it contains, that is, a package is named and can organize the named elements of software into a separate scope. An element can be uniquely identified in the system by a fully “qualified name” that is based on its own name and the name of the package that the element is in.
_   Packages are depicted by tabbed folders. If there are no elements to show in the package, then the package name goes into the centre of the folder. If details are needed, there are two ways this can be expressed: The elements can be nested within the folder. Alternately, oyher notation can be used. Contained elements can also be listed in a package by their names. These names can be partially qualified, but they should be unique within the package.
_   Relationships are denoted through dotted-line
arrows:
    _A package can <<import>> an element from another package or can import the entire contents of other packages. Import tag is public.
    _A package can do a private import, as indicated by the <<access>> tag
    _A package can <<uses>> relationship also. Implies that the package requires other for its full implementation.
    _Packages can also be <<merge>>. Merging typically occurs when two packages or concepts need to come together into one. This is a use of generalization that allows different definitions to be provided for the same concept.
_   Package diagrams can be created at any stage of development. They can also adapt and change with the latest version of software being worked on. Package diagrams are particularly useful for technical designers because they allow them to see the dependencies and relations between groups of related elements.

3.1.5 – UML Deployment Diagram
Are used to visualize the deployment details of a software system. The diagrams include more than just code, but also separate libraries, an installer, configuration files, and many other pieces. In order for software to be ready to run, it is necessary to understand all the files and executables involved and the environments where they reside.
_   The deployment environment, or deployment target, can be very specific and involve particular hardware devices. It can also be very general and involve supported operating systems. Details in a deployment diagram change accordingly. For example, software developed for Linux, MacOS or Windows may have differences from one another.
_   Deployment diagrams deal with artifacts. Artifacts are a physical result of the development process. Artifacts for a video game might include things like an executable to run the game, an installer to install the game, audio libraries for sound, and multimedia assets. These are created as outcomes of producing the system and are the final pieces to be put together.
_   There are two different types of deployment diagrams:
    _Specification-level diagrams: provides an overview of artifacts and deployment targets, without referencing specific details like machine names. It focuses on a general overview of your deployment rather than the specifics.
    _Instance level diagrams: is a more specific approach that maps specific artifacts to specific deployment targets. They can identify specific machines and hardware devices. This approach is usually used to highlight the differences in deployments among development, staging, and release builds.
_   When creating deployment diagrams, it is important to use the correct notation for the various elements:
    _Nodes: are deployment targets that contain artifacts available for execution.In a deployment diagram, they look like 3D boxes. Hardware devices are also displayed as 3D boxes, only they have a “device” tag on them to differentiate them.
    _Relationships can be represented as a solid line between two nodes, that shows a relationship between deployment targets. The line shows that the two nodes have a communication path between them. This relationship typically identifies a particular communication protocol.
        _Manifestation is a relationship where an artifact is a physical realization of a software component. It can be represented with a “manifests” indicatr.
_   If an artifact is drawn inside a node box, this shows that an artifact is deployed to a node. This also means that the artifact cannot function without this deployment target.
_   In a deployment diagram, there is a distinct hierarchy of deployment targets. This hierarchy is very important. You should start from the highest level of your deployment information, from application name down to device and operating system.
_   Deployment diagrams help provide consistency and organization to deployments, which helps avoid system failures. The diagrams also help keep track of the files and executables needed to deploy and run the software. The diagram can be on an instance level specific to the deployment machines you are using, or it can be general for a range of execution environments.

3.1.6 – UML Activity Diagram
Allows the representation of the control flow from activity to another in a software system. It captures the dynamic behaviour of the system and allows the mapping of branching into alternative flows.
_   Activities: are actions that further the flow of execution in a system. They are actions that when completed cause another action to execute. For example, an action can alter or create new objects. These changes or actions can drive your application forward. In order to create an activity diagram, you must:
    _1. Identify the activities.
    _2. Identify the respective conditions of the system’s activities.
_   There are a few major parts to an activity diagram:
    _Start and End: notes that look like labelled circles. These circles are where the diagram must begin. They show the starting activity that initializes the control flow of the application. The end node shows the final activity of the diagram.
    Intermediate activities are shaped like an oval, and they describe all of the activities that change the game state before the game ends.
    _Decision nodes: are diamonds that have an activity leading into it, and there is the possibility of two alternative outcomes as the next activity. The choice of outcome depends on how the condition on the decision node evaluates.
    _Partitions: divide activities up into different categories.
such as where it occurs, or the user role involved. 
_   All essential activities must be included in a diagram as well as the conditions.
_   Activity diagrams allow the mapping of concurrent activities that happen in parallel. A fork in the flow moves into parallel flows, so activities can happen at the same time. Parallel flows can join into a single flow. To denote this, activity diagrams can use a separate swimlane for each flow denotating Partitions. Swimlanes can also divide activities up into different categories, such as where it occurs or the user role involved. Arrows crossing each lane show how different activities of a system interact across categories.
_   Activity diagrams allow you to see what activities and conditions should be included in a system. As well, from the diagrams you see the order in which features are encountered while also allowing for alternate flows to be taken into account for the system.

Language-Based Systems
The programming paradigm of the language selected to implement a system will affect the architectural style of that system. Each programming paradigm has its own set of constructs, principles, and design patterns, and their use shapes the system being created. This section focuses on object-oriented architectural styles, which result from object-oriented programming paradigms.

S1 - 3.2.1 – Abstract Data Types and Object-Oriented (Language-Based Systems)
Object-oriented design architectural styles are focused on the data. When modelling a system in object-oriented design, begin by looking at the different kinds of data handled by the system to see how the system can be broken down into abstract data types.
_   Abstract data type: can be represented as a class that you define to organize data attributes in a meaningful way, so related attributes are grouped together along with their associated methods. Encapsulation restricts access to the data and dictates what can be done with it.
_   Object-oriented refers to a system composed of objects where each object is an instance of a class. In other words, the type of each object is its class. Objects may interact with each other through the use of their methods. The object-oriented paradigm allows for inheritance among abstract data types. This means that one abstract type can be declared an extension of another type.
_   These classes themselves form a language-based architecture that arises from basic object-oriented principles. The classes within the system will determine the overall structure of the system. In other words, the overall object-oriented architectural style of a system directly follows from the fact that an object-oriented approach was used in development.
_   Some problems are well suited to an object-oriented architectural style. However, not all situations will have easily identifiable classes. In some situations, another design choice may be better suited for the problem at hand. In a system centered around scientific computation, the identification of classes may result in unnecessary complexity, and in turn, lower performance.

3.2.2 – Main Program and Subroutine (Language-Based Systems)
Main program and subroutine architectural styles are focused on functions. They develop from a procedural programming paradigm. C is an example of a language that follows this paradigm.
_   In a main program and subroutine architectural style, a system is modelled by breaking up the overall functionality of the system into a main program and subroutines. Subroutines are connected by procedure calls, and they may have nested calls. In nested calls, subroutines may call other subroutines, which may call yet more subroutines, and so on. This means that the structure of the resulting code is not flat, but rather it is hierarchical, so it can be modelled as a directed graph. The structure of the subroutines that build up the system affect the structure of the system as a whole. The subroutines declared in the code are structure as a big “call tree”.
_   In this paradigm, data is stored as variables. Abstract data types are supported in procedural programming; however, inheritance is not explicitly supported. Under this paradigm, it is not easy to make one abstract type an extension of another. The main focus of this paradigm is therefore on the behaviour of functions and how data moves through those functions. The main program and subroutine architectural style is best suited for computation-focused systems.
_   Each subroutine may have its own local variables. A subroutine has access to all data within its scope. To access data outside its scope, data may be passed into the subroutines as parameters, by value or by reference, and data may be passed out of a subroutine as a return value.
_   This architectural style promotes modularity and function reuse, which results in certain advantages. When functions are well defined and do not produce side effects, they are considered like “black boxes.” Given an input, they will always have the same output. Further, library functions are easily integrated into programs.
_   There are also certain disadvantages from this style. Subroutines may mutate data in unexpected ways. A subroutine may be affected by data changes made by another subroutine during execution. This issue is especially true for global data shared across subroutines. Changes to data can be unpredictable and result in a function receiving an input that it was not expecting, or even an input that it is not capable of handling correctly, which can result in run-time errors.
_   Procedural programming paradigms are well suited to systems centred around computation, such as spending management programs. Identifying object-oriented components of these kinds of systems can be difficult and result in overly complex solutions. However, for problems where abstract data types with modelling make the solution easier, then object-oriented architectural styles are more well suited.

Repository-Based Systems
Modern software systems rarely operate in isolated environments. As a software developer, any software architecture you create needs to be capable of sharing information between separate components.
To solve (the state of a component is only temporary while the component is running, and save information in files that are not the best way to transfer data between components) a data-centric software architecture can be used. This architecture allows data to be stored and shared between multiple components, thus increasing the maintainability, reusability, and scalability of the system. This architecture can be achieved by integrating a method of shared data storage, such as a database, into the overall system design.
At the core of a data-centric architecture are two types of components:
    _Central data: is the component used to store and serve data across all components that connect to it.
    _Data accessors: are the components that connect to the central data component. The data accessors make queries and transactions against the information stored in the database.

3.2.3 – Databases (Repository-Based Systems)
Central data is often stored in a database.
_   Databases ensure several data qualities, which are important to data-centric architectures. These are:
    _Data integrity: A database ensures that data is accurate and consistent over its lifespan.
    _Data persistence: A database ensures that data will live on after a process has been terminated—databases can save data from any number of components.
_   One way that databases store information is by using tables. Relational databases are a type of database that uses tables. Each table represents an abstraction.
_   Relational databases use Structured Query Language (SQL) to query or “ask” the database for information and to perform transactions or “tell” the database to do something. These abilities allow for information to be shared through a database between data accessors.
_   The management and optimization of queries and transactions can be automated by a data base management system (DBMS), so integrating a database into a system is simplified.
_   In data-centric architectural design, the central data is passive. Central data is primarily concerned with storing and serving information, not with heavy data processing or large amounts of business logic.
_   Data accessors: are any component that connects to a database, which is characterized by its abilities to:
    _Share a set of data, while being able to operate independently.
    _Communicate with the database through database queries and transactions. Data accessors do not need to interact directly with each other and therefore do not need to know about each other.
    _Query the database to obtain shared system information. This is used to get data in order to perform computations.
    _Save the new state of the system back into the database using transactions. Data is stored back into the database once the data accessor has finished its processing.
_   A data accessor contains all the business rules required to perform its functions. This means that this software architecture enables you to separate concerns into different, specialized data accessors. Also, use of the data accessors can be controlled, so an end user only has permission for the ones they need on a day-to-day basis.
_   Data-centric architecture presents many advantages over a basic object-oriented system, because of the integration of a centralized database. These advantages include:
    _Increased support of data integrity, data backup, and data restoration.
    _Reduced overhead for data transfer between data accessor, as data accessors do not need to be concerned with talking to one another—the database communicates for them,
    _A system that can be easily scaled up, as data accessors are functionally independent, so additional features can be added without having to worry about affecting others.
    _Central data components usually “live” on a separate server machine with sufficient disk storage dedicated to the database, which allow for easier management of information.
_   Data-centric architecture also presents disadvantages. Integrating a database can disadvantage a system in the following ways:
    _The system is heavily reliant on the central data component, so if it becomes unavailable or if the data corrupts, then the entire system is affected. Safeguards such as data redundancies that replicate data on separate hard disks can be costly.
    _Data accessors are dependent on what gets stored in the database. New data accessors need to build around the existing data schema. Anything that isn’t stored needs to be computed, or if there is no matching column or table for a specific data need, then the database cannot be used.
    _It is difficult to change the existing data schema, particularly if a large amount of data is already stored. Further, data schema changes will affect data accessors.
_   In summary, data-centric software architecture is a commonly used design by many companies. They allow large amounts of data to be stored and managed in a central data repository, making a system more stable, reusable, maintainable, and exhibit better performance. They also separate the functionality of data accessors, so it is easier to scale the system. Finally, they also facilitate data sharing between data accessors through database queries and transactions.

3.2.4 – Layered Systems
In software, a layer is a collection of components that work together towards a common purpose. The key characteristic of a layered architecture is that the components in a layer only interact with components in their own layer or adjacent layers. When an upper layer interacts with the layer directly below it, it cannot see any of the deeper layers.
_   Usually, the inner or bottom layer provides services or abstractions for the layer outside or above it. The interfaces provided by the components of a layer should be well defined and driven by the needs of the system.
_   Layering allows for applying “separation of concerns” into each of the layers. Many layered systems are split into “presentation,” “logic,” and “data” layers.
_   An operating system for a computer is a common example of a layered system:
    _The kernel is the core of the operating system. One of its main responsibilities is to interface with the hardware and allocating resources.
    _Above the kernel layer is the system and application libraries layer. This layer provides the higher-level functions for saving files or drawing graphics.
    _Above this layer is the utilities and applications layer, which to most users is the operating system. Utilities are tools included with the operating system, such as command-line programs.
_   Advantages of layered systems include the fact that:
    _Users can perform complex tasks without needing to understand the layers below.
    _Different layers can be run at different levels of authorization or privilege. Typically, the top layer is considered the “user space” that does not have authority to allocate system resources or communicate with hardware directly. This “sandboxing” provides security and reliability to the kernel.
    _Designs will be more loosely coupled, as layered architecture follows the principle of least knowledge.
_   There are certain trade-offs to be aware of in layered systems. Most notably, enforcing layers has an efficiency trade-off. If only adjacent layers can communicate, then the system will likely have some interactions that pass through one layer to the next, and sometimes information must be shared between layers that are not adjacent. This extra communication adds complexity and uses up processing resources.
_   Overhead must be balanced against the separation of concerns gained from enforcing layers. If most communication is passing directly through a layer, then the design may need to be relaxed, or a different architecture may be better suited to the problem. If only a small amount of communication is passed through, then a layered system may be a good choice. Layered architecture can be relaxed by allowing for passthrough. In a diagram, this is shown as a notch in the layer.
_   In summary, layered architecture:
    _It can be intuitive and powerful. Many organizations and solutions have layered structures, so it is easy to apply layered architecture where appropriate.
    _It supports the separation of concerns, because each layer is a set of components with similar responsibility or purpose.
    _It is modular and loosely coupled, as each layer only communications with one or two other layers, allowing for different implementations to be easily swapped.
    _It can be adapted so that layering is not always strict, which helps manage design complexity or provide a starting point for structuring the system.

3.2.5 – Client Server n-Tier
n-Tier or multitier architectures are related to layered architectures. Tiers refer to components that are typically on different physical machines. Although the terms “tier” and “layer” are used interchangeably, they are not the same thing. n-Tier or multitier architectures are layered architectures based on tiers.
_   The number of tiers in an n-Tier architecture can vary, although three-tier and four-tier architectures are common. The relationship between two adjacent tiers in an n-Tier architecture is often a client/server relationship. In a client/server relationship, one program (the server) provides services such as storing information in a database or performing computation tasks upon request from another program (the client). This communication is known as the request-response. A tier can act as both a server and a client, fulfilling the requests of its clients and making requests of its servers at the same time.
_   Client-host and server-host refer to machines that host client software and server software respectively.
_   Request-response relationships can be:
    _A synchronous request-response relationship is one where the client sends a request, then awaits the server’s response before continuing execution. In UML, synchronous messages are depicted with a closed arrowhead. Servers do not always respond quickly, so a synchronous message may cause the client user interface to freeze while waiting for a response.
    _An asynchronous request-response relationship is one where the client sends a request, but control returns right away, so it can continue its processing on another need. None of this processing can depend on the response from the server. Once the server has completed the request, a message is sent to the client, which will have a handler to process the response. In UML, an asynchronous message is depicted with a line-arrowhead.
_   Client requests are often designed to run asynchronously, because it is often preferable to have clients be responsive for other tasks even if they are waiting for information from the server. Limiting client/server relationships to request/response messaging patterns allows for systems that can be scaled more easily by adding clients. Clients and servers are extensible, because as long as a server receives a message it knows, it will respond. The source of the message is not important to the server, so many clients can be added as needed.
_   n-Tier architecture can take on different numbers of tiers, based on separation of concerns. Additional tiers can be added to the system for specific purposes.
_   In a three-tier architecture, where a tier
is inserted between the database and end users. This tier is often referred to as a middle layer, a business layer, or an application layer—its name depends on its main responsibility. The middle layer will be a client of the database, and a server for the client application software on the end users’ devices. Middle tiers help determine how or when data can be changed, and in what ways. Having a middle layer allows client application software to be thinner, as it can be focused on presentation only. This makes it easier to maintain.
_   Two potential drawbacks of n-Tier architecture include:
    _It requires extra resources to manage the client/server relationships. If more tiers are added, there are more machines or processes to manage, with different communication protocols. This makes a system more complex, and therefore more difficult to change and maintain.
    _A server acts as a central point of failure. Systems may have backups or mirrors, but it can take time to switch to these backups and recover the server. Redundant servers are possible but add complexity.
_   The advantages of n-Tier architecture are notable, however, and contribute to its common use in the software industry:
    _n-Tier architecture is very scalable. Clients can continue to be added as long as a server can handle all the requests it receives in a reasonable time.
    _Centralization of functionality allow for data to reside on one machine but to be accessible by any machine on the same network.
    _Centralization of computing power allows client machines to require less processing power. Companies can thus offer processing power as a service, which is more practical and cost effective.
    _n-Tier architecture supports separation of concerns. Middle layers can take the role of managing application logic and accessing the database directly. Adding tiers can further allow for loose coupling and levels of abstraction, making a system that is easier to change and extend.
_   When a system can be split into service roles and request roles, a client/server architecture should be considered.

3.2.6 – Interpreters
Interpreter-based systems allow end users to write scripts, macros, or rules that access, compose, and run the basic features of those systems in new and dynamic ways. It provides users with flexible and portable functionality that can be applicable in a variety of commercial systems.
_   Interpreters can run scripts and macros. Scripts are often used for automating common tasks, such as scheduling tasks, performing repetitive actions, and composing complex tasks that invoke other commands. Macros are an evolution of scripts that became popular with the introduction of graphical user interfaces. A macro records keyboard and mouse inputs, so they may be executed later. 
_   Interpreter-based systems encourage end users to implement their own customizations. This is further supported by systems that offer an easier-to-use language with domain-specific abstractions suited to the needs and thinking of the end users. End users do not have to know the programming languages used in developing the software in order to customize the system for their needs.
_   Interpreter-based systems offer certain advantages. In particular, interpreters make systems more portable, so they can work on platforms that the interpreter supports. This is an important feature with the growth of virtual machines and virtual environments—more and more services are being hosted in the cloud.
_   However, interpreter-based systems also offer certain disadvantages. Interpreters can be slow. Basic implementations spend little time analyzing the source  code and use a line-by-line translate and execute strategy. This is a trade-off: it may be faster and more flexible for developers and end users to use an interpreted language, but slower for computers to execute interpreted code.
_   Java also uses interpreters!. In Java, programs are first translated into an intermediate language that is loaded into a Java Virtual Machine (JVM), which executes the intermediate language. The JVM will attempt to optimize the intermediate instructions by monitoring the frequency at which instructions are executed. The instructions that are executed frequently get translated into machine code and executed immediately. On the next execution of the same intermediate instructions, the JVM uses lazy linking to point the program to the previous machine code translation. Instructions that are not used frequently are left for the interpreter of the JVM to execute. This decreases execution time since frequently used instructions do not need to be constantly translated and the entire program does not need to be translated all at once. The JVM also provides portability to Java programs, allowing them to run on many operating environments.











































